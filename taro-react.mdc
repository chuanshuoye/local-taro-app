# Taro React 应用开发规范

## 项目架构

### 技术栈
- **框架**: React + Taro
- **UI组件库**: NutUI
- **状态管理**: Zustand
- **HTTP请求**: Axios
- **样式**: SASS/SCSS

### 目录结构
```
src/
├── api/                # API请求封装
├── assets/             # 静态资源（图片、字体等）
├── components/         # 公共组件
├── constants/          # 常量定义
├── hooks/              # 自定义hooks
├── pages/              # 页面组件
├── stores/             # Zustand状态管理
├── styles/             # 全局样式及变量
├── types/              # TypeScript类型定义
├── utils/              # 工具函数
├── app.config.ts       # Taro应用配置
├── app.scss            # 全局样式
└── app.tsx             # 应用入口
```

## 开发规范

### 组件开发
1. **组件命名**: 使用PascalCase命名组件文件和组件名
2. **组件结构**:
   - 功能组件使用函数式组件
   - 使用TypeScript定义props类型
   - 每个组件一个独立文件
3. **组件文件组织**:
   - 每个独立组件创建单独的文件夹
   - 文件夹内包含index.tsx和index.scss
   - 复杂组件可拆分为子组件，放在同一文件夹内
   - 组件相关的工具函数放在utils.ts中
4. **组件分类**:
   - 基础组件（Base）：按钮、输入框等基础UI组件
   - 业务组件（Business）：特定业务场景的组件
   - 布局组件（Layout）：页面布局相关组件
   - 容器组件（Container）：处理数据逻辑的容器
   - 展示组件（Presentational）：纯展示UI的组件
5. **组件通信**:
   - 父子组件：通过props传递数据和回调
   - 兄弟组件：通过共同的父组件或Zustand状态管理
   - 全局状态：使用Zustand管理
6. **组件测试**:
   - 每个组件应编写单元测试
   - 测试文件命名为`__tests__/ComponentName.test.tsx`
7. **组件示例**:
```tsx
// components/Button/index.tsx
import React from 'react';
import { View, Text } from '@tarojs/components';
import './index.scss';

interface ButtonProps {
  text: string;
  onClick?: () => void;
  type?: 'primary' | 'default';
}

const Button: React.FC<ButtonProps> = ({ text, onClick, type = 'default' }) => {
  return (
    <View className={`custom-button ${type}`} onClick={onClick}>
      <Text>{text}</Text>
    </View>
  );
};

export default Button;
```

### UI布局规范

1. **栅格系统**:
   - 采用12列栅格系统
   - 使用flex布局进行组件排列
   - 容器内边距标准为16px
2. **响应式设计**:
   - 设计稿以750px宽度为基准
   - 使用Taro提供的px自动转换功能
   - 关键断点：
     - 小屏手机: <375px
     - 标准手机: 375px-414px
     - 大屏手机: >414px
3. **间距规范**:
   - 基础间距单位：4px
   - 组件内部间距：8px/12px/16px
   - 组件外部间距：16px/24px/32px
   - 纵向排版间距：12px/16px/24px
4. **颜色规范**:
   - 主色：在variables.scss中定义
   - 文字颜色：主文本、次文本、辅助文本三级
   - 背景色：主背景、卡片背景、分割线颜色
5. **字体规范**:
   - 主标题：18px，粗体
   - 次标题：16px，粗体
   - 正文：14px，常规
   - 辅助文字：12px，常规
6. **阴影规范**:
   - 浅阴影：卡片、按钮等
   - 中阴影：弹窗、悬浮元素
   - 深阴影：特殊强调元素
7. **布局示例**:
```scss
// styles/layout.scss
.page-container {
  padding: 16px;
  background-color: $background-color;
}

.card {
  margin-bottom: 16px;
  padding: 16px;
  background-color: $card-background;
  border-radius: $border-radius;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.flex-row {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.flex-column {
  display: flex;
  flex-direction: column;
}

.space-between {
  justify-content: space-between;
}

.flex-1 {
  flex: 1;
}

// 栅格系统
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -8px;
}

@for $i from 1 through 12 {
  .col-#{$i} {
    width: percentage($i / 12);
    padding: 0 8px;
    box-sizing: border-box;
  }
}
```

8. **图片资源规范**:
   - 推荐使用SVG矢量图
   - 小图标统一使用图标库
   - 大图片需压缩优化
   - 图片命名使用小写加连字符，如：home-banner.png

9. **常见UI模式**:
   - 列表页：搜索栏+筛选+列表内容+分页/加载更多
   - 详情页：标题+内容展示+底部操作栏
   - 表单页：表单项自上而下排列+底部提交按钮
   - 弹窗：居中或底部弹出，需要半透明遮罩层

### 状态管理 (Zustand)
1. **Store定义**: 每个功能模块创建独立的store
2. **Store示例**:
```ts
// stores/userStore.ts
import { create } from 'zustand';

interface UserState {
  username: string;
  isLoggedIn: boolean;
  login: (username: string) => void;
  logout: () => void;
}

const useUserStore = create<UserState>((set) => ({
  username: '',
  isLoggedIn: false,
  login: (username) => set({ username, isLoggedIn: true }),
  logout: () => set({ username: '', isLoggedIn: false }),
}));

export default useUserStore;
```

### API请求 (Axios)
1. **请求封装**: 统一封装API请求，处理拦截器和错误
2. **API示例**:
```ts
// api/request.ts
import axios from 'axios';
import Taro from '@tarojs/taro';

const request = axios.create({
  baseURL: 'https://api.example.com',
  timeout: 10000,
});

// 请求拦截器
request.interceptors.request.use(
  (config) => {
    const token = Taro.getStorageSync('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// 响应拦截器
request.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const { status } = error.response || {};
    if (status === 401) {
      // 处理未授权
      Taro.navigateTo({ url: '/pages/login/index' });
    }
    return Promise.reject(error);
  }
);

export default request;
```

### 样式 (SASS/SCSS)
1. **样式组织**:
   - 全局样式变量定义在 `styles/variables.scss`
   - 组件样式使用模块化SCSS
   - 使用BEM命名规范
2. **样式示例**:
```scss
// styles/variables.scss
$primary-color: #1890ff;
$error-color: #f5222d;
$text-color: #333;
$border-radius: 4px;

// components/Button/index.scss
@import '../../styles/variables.scss';

.custom-button {
  padding: 8px 16px;
  border-radius: $border-radius;
  display: inline-block;
  
  &.primary {
    background-color: $primary-color;
    color: white;
  }
  
  &.default {
    background-color: #f7f7f7;
    color: $text-color;
  }
}
```

### Taro跨端开发
1. **平台判断**:
```ts
import Taro from '@tarojs/taro';

// 判断当前运行环境
const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP;
const isH5 = Taro.getEnv() === Taro.ENV_TYPE.WEB;
```

2. **条件编译**:
```ts
// #ifdef H5
console.log('这段代码只在H5环境执行');
// #endif

// #ifdef WEAPP
console.log('这段代码只在小程序环境执行');
// #endif
```

## 最佳实践

### 性能优化
1. 使用`React.memo`优化重复渲染
2. 使用`useMemo`和`useCallback`缓存函数和计算值
3. 按需引入NutUI组件减少包体积

### TypeScript
1. 定义明确的接口和类型
2. 避免使用`any`类型
3. 利用泛型提高代码复用性

### 安全实践
1. 敏感信息不存储在前端代码
2. API请求添加适当的验证和防护
3. 用户输入进行验证和转义

## 构建与部署
1. **环境配置**: 使用`.env`文件区分开发/测试/生产环境
2. **打包命令**:
   - H5: `pnpm build:h5`
   - 微信小程序: `pnpm build:weapp` 

## 学习资源
- [Taro官方文档](https://taro-docs.jd.com/)
- [React文档](https://reactjs.org/)
- [NutUI-React文档](https://nutui.jd.com/react/#/zh-CN/guide/intro)
- [Zustand文档](https://github.com/pmndrs/zustand) 